; DO NOT EDIT THIS FILE - it is generated from setup.iss.template
; Make changes to the template file instead: templates/windows/setup.iss.template
; To regenerate: ./build-app --generate-docs

#define MyVersion "1.0.0"
; Get app name from temporary file created by build script
#define MyAppName ReadIni("appname.ini", "app", "name", "")
#if MyAppName == ""
#error Application name not found. Run build.bat first, or manually create appname.ini with [app] section containing name=<appname>
#endif
#define MyContextMenuText "&Clean with " + MyAppName
#define MyCompanyName "Taco Comovilla"
#define MyCopyrightInfo "Copyright Â© 2025 Taco Comovilla"

[Setup]
AppName={#MyAppName}
AppVersion={#MyVersion}
DefaultDirName={autopf}\{#MyAppName}
DisableProgramGroupPage=yes
UninstallDisplayIcon={app}\{#MyAppName}.exe
OutputDir=dist\windows
OutputBaseFilename=Setup-{#MyAppName}-{#MyVersion}
ArchitecturesInstallIn64BitMode=x64compatible
; Automatically uninstall previous versions during upgrade
VersionInfoVersion={#MyVersion}

[CustomMessages]
DeleteUserData=Delete user configuration and log files

[VersionInfo]
FileDescription={#MyAppName} Uninstaller
InternalName={#MyAppName}-uninstall
OriginalFilename=unins000.exe
ProductName={#MyAppName}
ProductVersion={#MyVersion}
FileVersion={#MyVersion}
CompanyName={#MyCompanyName}
LegalCopyright={#MyCopyrightInfo}

[Dirs]
; Create the directory in the local app data folder
Name: "{localappdata}\{#MyAppName}"

[Files]
; Copy the executable to the program files directory
Source: "dist\windows\{#MyAppName}.exe"; DestDir: "{app}"

; Copy config.toml to the local app data directory
; @TODO fix setup.iss so that config-example.toml is renamed to config.toml when it's copied - use DestName probably
Source: "src\config.example.toml"; DestDir: "{localappdata}\{#MyAppName}"; DestName: "config.toml"; Flags: onlyifdoesntexist ignoreversion

; Create an empty log file in the local app data directory
Source: "src\{#MyAppName}.log"; DestDir: "{localappdata}\{#MyAppName}"; Flags: onlyifdoesntexist ignoreversion

[Registry]

; Add context menu entry for righ-clicking inside folders
Root: HKCR; Subkey: "Directory\Background\shell\{#MyAppName}"; \
ValueType: string; \
ValueName: ""; \
ValueData: "{#MyContextMenuText}"; \
Flags: createvalueifdoesntexist

Root: HKCR; Subkey: "Directory\Background\shell\{#MyAppName}\command"; \
ValueType: string; \
ValueName: ""; \
ValueData: """{app}\{#MyAppName}.exe"""; \
Flags: createvalueifdoesntexist

Root: HKCR; Subkey: "Directory\shell\{#MyAppName}"; \
Flags: createvalueifdoesntexist

Root: HKCR; Subkey: "Directory\shell\{#MyAppName}"; \
ValueType: string; \
ValueName: ""; \
ValueData: "{#MyContextMenuText}"; \
Flags: createvalueifdoesntexist

Root: HKCR; Subkey: "Directory\shell\{#MyAppName}\command"; \
ValueType: string; \
ValueName: ""; \
ValueData: """{app}\{#MyAppName}.exe"" ""%1"""; \
Flags: createvalueifdoesntexist

; MKV file context menu
Root: HKCR; Subkey: "SystemFileAssociations\.mkv\Shell\{#MyAppName}"; \
ValueType: string; \
ValueName: ""; \
ValueData: "{#MyContextMenuText}"; \
Flags: createvalueifdoesntexist

Root: HKCR; Subkey: "SystemFileAssociations\.mkv\Shell\{#MyAppName}\command"; \
ValueType: string; \
ValueName: ""; \
ValueData: """{app}\{#MyAppName}.exe"" ""%1"""; \
Flags: createvalueifdoesntexist

; MP4 file context menu
Root: HKCR; Subkey: "SystemFileAssociations\.mp4\Shell\{#MyAppName}"; \
ValueType: string; \
ValueName: ""; \
ValueData: "{#MyContextMenuText}"; \
Flags: createvalueifdoesntexist

Root: HKCR; Subkey: "SystemFileAssociations\.mp4\Shell\{#MyAppName}\command"; \
ValueType: string; \
ValueName: ""; \
ValueData: """{app}\{#MyAppName}.exe"" ""%1"""; \
Flags: createvalueifdoesntexist

; M4V file context menu
Root: HKCR; Subkey: "SystemFileAssociations\.m4v\Shell\{#MyAppName}"; \
ValueType: string; \
ValueName: ""; \
ValueData: "{#MyContextMenuText}"; \
Flags: createvalueifdoesntexist

Root: HKCR; Subkey: "SystemFileAssociations\.m4v\Shell\{#MyAppName}\command"; \
ValueType: string; \
ValueName: ""; \
ValueData: """{app}\{#MyAppName}.exe"" ""%1"""; \
Flags: createvalueifdoesntexist

; MP4V file context menu
Root: HKCR; Subkey: "SystemFileAssociations\.mp4v\Shell\{#MyAppName}"; \
ValueType: string; \
ValueName: ""; \
ValueData: "{#MyContextMenuText}"; \
Flags: createvalueifdoesntexist

Root: HKCR; Subkey: "SystemFileAssociations\.mp4v\Shell\{#MyAppName}\command"; \
ValueType: string; \
ValueName: ""; \
ValueData: """{app}\{#MyAppName}.exe"" ""%1"""; \
Flags: createvalueifdoesntexist

; Add application to system PATH
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; \
ValueType: expandsz; \
ValueName: "PATH"; \
ValueData: "{olddata};{app}"; \
Flags: uninsdeletevalue

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppName}.exe"

[UninstallDelete]
Type: filesandordirs; Name: "{app}\*.*"

[Code]
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
  DeleteUserData: Boolean;
begin
  if CurUninstallStep = usUninstall then
  begin
    DeleteUserData := MsgBox('Do you want to delete user configuration and log files?', mbConfirmation, MB_YESNO) = IDYES;
    if DeleteUserData then
    begin
      DelTree(ExpandConstant('{localappdata}\{#MyAppName}'), True, True, True);
    end;
  end;
end;

[UninstallRun]
; Remove registry entries during uninstall
Filename: "reg"; Parameters: "delete ""HKCR\Directory\Background\shell\{#MyAppName}"" /f"; Flags: runhidden
Filename: "reg"; Parameters: "delete ""HKCR\Directory\shell\{#MyAppName}"" /f"; Flags: runhidden
Filename: "reg"; Parameters: "delete ""HKCR\SystemFileAssociations\.mkv\Shell\{#MyAppName}"" /f"; Flags: runhidden
Filename: "reg"; Parameters: "delete ""HKCR\SystemFileAssociations\.mp4\Shell\{#MyAppName}"" /f"; Flags: runhidden
Filename: "reg"; Parameters: "delete ""HKCR\SystemFileAssociations\.m4v\Shell\{#MyAppName}"" /f"; Flags: runhidden
Filename: "reg"; Parameters: "delete ""HKCR\SystemFileAssociations\.mp4v\Shell\{#MyAppName}"" /f"; Flags: runhidden