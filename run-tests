#!/usr/bin/env python3
"""Test runner script for the application."""

import argparse
import os
import subprocess
import sys
from pathlib import Path


class Colors:
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    NC = '\033[0m'  # No Color


def print_colored(message, color):
    """Print message with color if stdout is a terminal."""
    if sys.stdout.isatty():
        print(f"{color}{message}{Colors.NC}")
    else:
        print(message)


def check_venv():
    """Check if virtual environment exists and is activated."""
    venv_path = Path(".venv")
    if not venv_path.exists():
        print_colored("‚ùå Virtual environment not found. Run: python -m venv .venv", Colors.RED)
        sys.exit(1)
    
    # Check if we're in a virtual environment
    if not hasattr(sys, 'real_prefix') and not (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print_colored("‚ö†Ô∏è  Virtual environment not activated. Run: source .venv/bin/activate", Colors.YELLOW)
        # Try to activate automatically by running with the venv python
        venv_python = venv_path / "bin" / "python"
        if venv_python.exists():
            print_colored("üîÑ Attempting to run with virtual environment python...", Colors.YELLOW)
            cmd = [str(venv_python)] + sys.argv
            os.execv(str(venv_python), cmd)
        else:
            sys.exit(1)


def check_pytest():
    """Check if pytest is installed and install if needed."""
    try:
        import pytest
    except ImportError:
        print_colored("üì¶ Installing test dependencies...", Colors.YELLOW)
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
                         check=True, capture_output=True)
        except subprocess.CalledProcessError as e:
            print_colored(f"‚ùå Failed to install dependencies: {e}", Colors.RED)
            sys.exit(1)


def run_tests(test_type):
    """Run tests based on the specified type."""
    check_venv()
    check_pytest()
    
    print_colored("üß™ Running application test suite...", Colors.YELLOW)
    
    if test_type in ["quick", "q"]:
        print_colored("üöÄ Running core tests only...", Colors.YELLOW)
        cmd = [sys.executable, "-m", "pytest", "tests/test_main.py", "tests/test_config.py", "tests/test_cli.py", "-v"]
    elif test_type in ["unit", "u"]:
        print_colored("üîß Running unit tests...", Colors.YELLOW)
        cmd = [sys.executable, "-m", "pytest", "-m", "unit", "-v"]
    elif test_type in ["integration", "i"]:
        print_colored("üîó Running integration tests...", Colors.YELLOW)
        cmd = [sys.executable, "-m", "pytest", "-m", "integration", "-v"]
    elif test_type in ["coverage", "c"]:
        print_colored("üìä Running tests with coverage...", Colors.YELLOW)
        cmd = [sys.executable, "-m", "pytest", "--cov=src", "--cov-report=term-missing", "--cov-report=html"]
    elif test_type in ["all", "a"]:
        print_colored("üéØ Running all tests...", Colors.YELLOW)
        cmd = [sys.executable, "-m", "pytest", "-v"]
    else:
        print_colored(f"‚ùå Unknown option: {test_type}", Colors.RED)
        print("Run 'python run-tests.py --help' for usage information")
        sys.exit(1)
    
    try:
        result = subprocess.run(cmd, check=True)
        print_colored("‚úÖ Tests completed successfully!", Colors.GREEN)
        
        if test_type in ["coverage", "c"]:
            print_colored("üìà Coverage report generated in htmlcov/index.html", Colors.GREEN)
            
    except subprocess.CalledProcessError:
        print_colored("‚ùå Tests failed!", Colors.RED)
        sys.exit(1)


def main():
    """Main function."""
    parser = argparse.ArgumentParser(description="Test runner script for the application")
    parser.add_argument(
        "test_type", 
        nargs="?", 
        default="all",
        choices=["quick", "q", "unit", "u", "integration", "i", "coverage", "c", "all", "a"],
        help="Type of tests to run"
    )
    
    # Add help text similar to the shell script
    parser.epilog = """
Test options:
  quick, q      - Run core tests only (recommended)
  unit, u       - Run unit tests only
  integration, i - Run integration tests only
  coverage, c   - Run with coverage report
  all, a        - Run all tests (default)
"""
    
    args = parser.parse_args()
    run_tests(args.test_type)


if __name__ == "__main__":
    main()