= Contributing Guide
:doctype: article
:toclevels: 3
:hide-uri-scheme:
:icons: font
:idprefix:
:idseparator: -
:source-language: shell
ifndef::env-github[:icons: font]
ifdef::env-github[]
:status:
:caution-caption: :fire:
:important-caption: :exclamation:
:note-caption: :information_source:
:tip-caption: :bulb:
:warning-caption: :warning:
endif::[]

// @TODO explain the purpose of this document

== Installing Prerequisites

Refer to link:README.adoc#installing-prerequisites[README]

== Installing ${APP_NAME} from source

=== Step 1: Clone the repo

[source,shell]
----
git clone ${REPO_BASE_URL}.git
----

=== Step 2: Set up a Python virtual environment

==== Method 1: Using link:https://docs.python.org/3/library/venv.html[venv^] (recommended)

// @TODO link to venv docs in the above section title

++++
<details>
<summary>Linux/macOS Setup</summary>
++++

[source,shell]
----
cd ${APP_NAME}
python3 -m venv .venv
----

++++
</details>
++++

++++
<details>
<summary>Windows Setup</summary>
++++

[source,console]
----
cd ${APP_NAME}
py -m venv .venv
----

++++
</details>
++++

==== Method 2: Using link:https://github.com/pyenv/pyenv[pyenv^]

++++
<details>
<summary>Linux/macOS Pyenv Setup</summary>
++++

[source,shell]
----
brew install pyenv
pyenv install 3.13.5
----

Per the pyenv instructions, make sure this is added to `~/.zshrc` or `~/.bashrc`:

[source,shell]
----
export PYENV_ROOT="$$HOME/.pyenv"
export PATH="$$PYENV_ROOT/bin:$$PATH"
eval "$$(pyenv init -)"
----

Then restart your shell or run `source ~/.zshrc` (or `source ~/.bashrc`) and continue:

[source,shell]
----
cd ${APP_NAME}
pyenv local 3.13.5 # creates .python-version in project dir
----

++++
</details>
++++

++++
<details>
<summary>Windows Pyenv Setup</summary>
++++

[source,console]
----
# Install pyenv-win using Git
git clone https://github.com/pyenv-win/pyenv-win.git %USERPROFILE%\.pyenv

# Or install using PowerShell
Invoke-WebRequest -UseBasicParsing -Uri "https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1" -OutFile "./install-pyenv-win.ps1"; &"./install-pyenv-win.ps1"
----

Add the following to your PATH environment variables (you can do this through System Properties > Environment Variables or PowerShell):

[source,console]
----
# Add to PATH
%USERPROFILE%\.pyenv\pyenv-win\bin
%USERPROFILE%\.pyenv\pyenv-win\shims
----

Restart your command prompt or PowerShell, then continue:

[source,console]
----
pyenv install 3.13.5
cd ${APP_NAME}
pyenv local 3.13.5
----

++++
</details>
++++

=== Step 3: Build ${APP_NAME}

The unified Python build script automatically detects your Python environment and handles dependencies across all platforms.

[source,shell]
----
# Build executable
./build-app

# Build executable with release package
./build-app --release
----

The script will:

. Automatically detect and use your Python environment (pyenv, venv, or system Python)
. Install dependencies from `requirements.txt`
. Build the standalone executable using PyInstaller
. Generate platform-specific files (Windows version info, InnoSetup configuration)
. Create release packages when using --release flag

=== Step 4: Install ${APP_NAME} (and file manager extensions)

Refer to link:README.adoc#installing-${APP_NAME}[README]

=== Step 5: Building Debian Packages (Linux only)

For creating Debian packages that can be installed via `apt` or `dpkg`:

==== Install Debian Packaging Tools

[source,shell]
----
# Ubuntu/Debian
sudo apt-get install devscripts debhelper dh-python python3-all python3-dev python3-setuptools
----

==== Build the Package

[source,shell]
----
# Build Debian package
./build-app --deb
----

This will:

. Generate Debian packaging files from templates
. Build the package using `debuild`
. Create a `.deb` file in the parent directory

==== Install the Package

[source,shell]
----
# Install with automatic dependency resolution
sudo apt-get install -f ../cattywampus_*_all.deb

# Or install directly
sudo dpkg -i ../cattywampus_*_all.deb
----

The Debian package provides:

* Binary installed to `/usr/bin/cattywampus` (available in PATH)
* Automatic user configuration setup during installation
* Proper dependencies on `mkvtoolnix` and `atomicparsley`
* Standard package management (upgrade, remove, etc.)

NOTE: This packaging method is intended to eventually replace the custom build/install/uninstall scripts with standard Debian package management.

== Development Environment Setup

=== VSCode Setup (Recommended)

For the best development experience with this project, we recommend using Visual Studio Code with the following extensions:

==== Required Extensions

* **AsciiDoc** (asciidoctor.asciidoctor-vscode) - For editing `.adoc` documentation files
* **Python** (ms-python.python) - For Python development with IntelliSense, debugging, and linting


==== Optional Extensions

* **GitLens** (eamodio.gitlens) - Enhanced Git capabilities
* **Black Formatter** (ms-python.black-formatter) - Python code formatting
* **Ruff** (charliermarsh.ruff) - Fast Python linter

==== Workspace Settings

Recommended VSCode workspace settings are included in `.vscode/settings.json`.

== Contributing

=== Code Style Guide

This project follows Python best practices and uses automated tools to maintain code quality.

==== Code Formatting

We use **Black** for consistent code formatting:

[source,shell]
----
# Format all Python files
black src/ tests/

# Check formatting without making changes
black --check src/ tests/
----

==== Linting

We use **Ruff** for fast, comprehensive linting:

[source,shell]
----
# Lint all Python files
ruff check src/ tests/

# Auto-fix issues where possible
ruff check --fix src/ tests/
----

==== Type Checking

We use **mypy** for static type checking:

[source,shell]
----
# Type check all Python files
mypy src/
----

==== Code Style Rules

* **Line length**: 88 characters (Black default)
* **Imports**: Use absolute imports, sort with isort/Ruff
* **Docstrings**: Use Google-style docstrings for public APIs
* **Naming**: Follow PEP 8 conventions
* **Type hints**: Add type hints to new code where beneficial

=== Pre-commit Checks

Before submitting a pull request, run these commands to ensure code quality:

[source,shell]
----
# Format code
black src/ tests/

# Lint and fix issues
ruff check --fix src/ tests/

# Type check
mypy src/

# Run tests
./run-tests quick
----

=== Pull Request Guidelines

1. Create a feature branch from `main`
2. Make your changes following the code style guide
3. Run all pre-commit checks and ensure they pass
4. Write or update tests for your changes
5. Update documentation if needed
6. Submit a pull request with a clear description

=== Testing

Run the test suite before submitting changes:

[source,shell]
----
# Run quick core tests (recommended for development)
./run-tests quick

# Run full test suite with coverage
./run-tests coverage

# Run all available tests
./run-tests all
----

Refer to `./run-tests help` for all available testing options.
