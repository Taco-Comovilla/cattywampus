#!/usr/bin/env python3
"""Unified uninstallation script for application and file manager integrations."""

import argparse
import platform
import shutil
import sys
from pathlib import Path


def get_app_name():
    """Get application name from version.py."""
    sys.path.insert(0, "src")
    try:
        from version import __app_name__

        return __app_name__
    except ImportError:
        print("Error: Could not import application name from src/version.py")
        sys.exit(1)


def uninstall_linux_binary(app_name):
    """Remove binary from ~/.local/bin on Linux."""
    target_path = Path.home() / ".local" / "bin" / app_name
    if target_path.exists():
        print(f"üóëÔ∏è  Removing {app_name} executable from {target_path}")
        target_path.unlink()
        return True
    print(f"‚è≠Ô∏è  Binary not found at {target_path}")
    return False


def uninstall_nautilus_integration(app_name):
    """Remove Nautilus file manager integration."""
    removed = False

    print("üêö Removing Nautilus integration...")

    # Remove legacy Python extension
    ext_file = (
        Path.home()
        / ".local"
        / "share"
        / "nautilus-python"
        / "extensions"
        / "nautilus_extension.py"
    )
    if ext_file.exists():
        print(f"üì¶ Removing legacy nautilus-python extension: {ext_file}")
        ext_file.unlink()
        removed = True

    # Remove desktop action
    desktop_file = (
        Path.home()
        / ".local"
        / "share"
        / "file-manager"
        / "actions"
        / f"{app_name}.desktop"
    )
    if desktop_file.exists():
        print(f"üß© Removing Nautilus .desktop action: {desktop_file}")
        desktop_file.unlink()
        removed = True

    # Remove script
    script_file = (
        Path.home()
        / ".local"
        / "share"
        / "nautilus"
        / "scripts"
        / f"Clean with {app_name}"
    )
    if script_file.exists():
        print(f"üìÑ Removing Nautilus script: {script_file}")
        script_file.unlink()
        removed = True

    if not removed:
        print("‚è≠Ô∏è  No Nautilus integrations found")


def uninstall_kde_integration(app_name):
    """Remove KDE/Dolphin service menus."""
    removed = False

    print("üê¨ Removing KDE/Dolphin service menus...")

    kde_dirs = [
        Path.home() / ".local" / "share" / "kservices5" / "ServiceMenus",
        Path.home() / ".kde" / "share" / "kde4" / "services" / "ServiceMenus",
        Path.home() / ".kde4" / "share" / "kde4" / "services" / "ServiceMenus",
    ]

    for kde_dir in kde_dirs:
        service_file = kde_dir / f"{app_name}.desktop"
        if service_file.exists():
            print(f"  Removing: {service_file}")
            service_file.unlink()
            removed = True

    if not removed:
        print("‚è≠Ô∏è  No KDE integrations found")


def uninstall_xfce_integration(app_name):
    """Remove XFCE/Thunar custom actions."""
    print("üê≠ Removing XFCE/Thunar custom actions...")

    uca_file = Path.home() / ".config" / "Thunar" / "uca.xml"

    if not uca_file.exists():
        print("‚è≠Ô∏è  No Thunar uca.xml found")
        return

    try:
        content = uca_file.read_text()

        # Look for our action block and remove it
        lines = content.split("\n")
        new_lines = []
        skip_lines = False

        for line in lines:
            if f"<name>Clean with {app_name}</name>" in line:
                # Found our action, start skipping until we find the closing </action>
                skip_lines = True
                # Also remove the opening <action> tag (previous line if it exists)
                if new_lines and "<action>" in new_lines[-1]:
                    new_lines.pop()
                continue
            if skip_lines and "</action>" in line:
                # End of our action block, stop skipping
                skip_lines = False
                continue
            if not skip_lines:
                new_lines.append(line)

        new_content = "\n".join(new_lines)

        if new_content != content:
            uca_file.write_text(new_content)
            print(f"üìù Removed {app_name} action from {uca_file}")
        else:
            print("‚è≠Ô∏è  No XFCE integration found")

    except Exception as e:
        print(f"‚ö†Ô∏è  Error processing Thunar uca.xml: {e}")


def uninstall_mate_integration(app_name):
    """Remove MATE/Caja scripts."""
    print("ü¶ò Removing MATE/Caja scripts...")

    script_file = (
        Path.home() / ".config" / "caja" / "scripts" / f"Clean with {app_name}"
    )
    if script_file.exists():
        print(f"üìÑ Removing Caja script: {script_file}")
        script_file.unlink()
    else:
        print("‚è≠Ô∏è  No MATE integration found")


def uninstall_macos_quick_action(app_name):
    """Remove macOS Finder Quick Action."""
    print("üçé Removing macOS Finder Quick Action...")

    workflow_dir = Path.home() / "Library" / "Services"
    workflow_name = f"Clean with {app_name}.workflow"
    workflow_path = workflow_dir / workflow_name

    if workflow_path.exists():
        print(f"üóëÔ∏è  Removing Quick Action: {workflow_path}")
        shutil.rmtree(workflow_path)
        print("‚úÖ Quick Action removed successfully!")
    else:
        print("‚è≠Ô∏è  No macOS Quick Action found")


def prompt_remove_app_folder(app_name, dry_run=False):
    """Prompt user to remove application folder with logs and config."""
    print(f"üìÅ Application folder removal for {app_name}")

    # Import config module to get paths
    sys.path.insert(0, "src")
    try:
        from mcconfig import Config

        config = Config("config.toml")

        app_folder = Path(config.config_path)
        config_file = Path(config.config_file_path)
        log_file = Path(config.log_file_path)

        if not app_folder.exists():
            print("‚è≠Ô∏è  No application folder found")
            return

        print(f"\nüìÇ Application folder found at: {app_folder}")

        # List what will be removed
        files_to_remove = []
        if config_file.exists():
            files_to_remove.append(f"  ‚Ä¢ Personal configuration: {config_file}")
        if log_file.exists():
            files_to_remove.append(f"  ‚Ä¢ Log file: {log_file}")

        if files_to_remove:
            print("üìã The following personal files will be removed:")
            for file_desc in files_to_remove:
                print(file_desc)

        if dry_run:
            print("üîç DRY RUN: Would prompt to remove application folder")
            return

        # Prompt user for confirmation
        print("\n‚ö†Ô∏è  This will permanently delete your personal configuration and logs.")
        print("   Your customized settings, preferences, and log history will be lost.")
        print(
            "üí° Choose 'N' (default) to keep your settings for future reinstallation."
        )
        response = (
            input("‚ùì Remove application folder and all data? [y/N]: ").strip().lower()
        )

        if response in ["y", "yes"]:
            try:
                shutil.rmtree(app_folder)
                print(f"‚úÖ Application folder removed: {app_folder}")
            except Exception as e:
                print(f"‚ùå Error removing application folder: {e}")
        else:
            print("‚è≠Ô∏è  Application folder kept (user choice)")

    except ImportError as e:
        print(f"‚ö†Ô∏è  Could not access application configuration: {e}")
        print("   Application folder location unknown, skipping removal")


def main():
    """Main uninstallation function."""
    parser = argparse.ArgumentParser(
        description="Uninstall application and file manager integrations"
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Show what would be removed without making changes",
    )
    parser.add_argument(
        "--integrations",
        action="store_true",
        help="Only remove file manager integrations (skip app folder removal)",
    )
    parser.add_argument(
        "--preserve-config",
        action="store_true",
        help="Preserve user configuration and logs (skip config folder removal)",
    )
    args = parser.parse_args()

    system = platform.system()
    if system not in ["Linux", "Darwin"]:
        print(f"‚ùå Unsupported operating system: {system}")
        sys.exit(1)

    app_name = get_app_name()

    if args.integrations:
        print(f"üóëÔ∏è  Uninstalling file manager integrations for {app_name}")
    else:
        print(f"üóëÔ∏è  Uninstalling {app_name} application and file manager integrations")

    if args.dry_run:
        print("üîç DRY RUN MODE - no changes will be made")

        # Show app folder removal (unless --integrations or --preserve-config flag is used)
        if not args.integrations and not args.preserve_config:
            prompt_remove_app_folder(app_name, dry_run=True)
            print()
        elif args.preserve_config:
            print(
                "üíæ DRY RUN: Would preserve user configuration and logs (--preserve-config specified)"
            )
            print()

        print("Would remove the following integrations:")

        if system == "Linux":
            binary_path = Path.home() / ".local" / "bin" / app_name
            if binary_path.exists():
                print(f"  - Binary: {binary_path}")

            # List all integration files that would be removed
            integration_files = [
                Path.home()
                / ".local"
                / "share"
                / "nautilus-python"
                / "extensions"
                / "nautilus_extension.py",
                Path.home()
                / ".local"
                / "share"
                / "file-manager"
                / "actions"
                / f"{app_name}.desktop",
                Path.home()
                / ".local"
                / "share"
                / "nautilus"
                / "scripts"
                / f"Clean with {app_name}",
                Path.home()
                / ".local"
                / "share"
                / "kservices5"
                / "ServiceMenus"
                / f"{app_name}.desktop",
                Path.home() / ".config" / "caja" / "scripts" / f"Clean with {app_name}",
            ]

            for file_path in integration_files:
                if file_path.exists():
                    print(f"  - Integration: {file_path}")

        elif system == "Darwin":
            workflow_path = (
                Path.home() / "Library" / "Services" / f"Clean with {app_name}.workflow"
            )
            if workflow_path.exists():
                print(f"  - Quick Action: {workflow_path}")

        return

    # Step 1: Remove application folder and config (unless --integrations or --preserve-config flag is used)
    if not args.integrations and not args.preserve_config:
        prompt_remove_app_folder(app_name, args.dry_run)
        print()  # Add spacing
    elif args.preserve_config:
        print("üíæ Preserving user configuration and logs (--preserve-config specified)")
        print()

    # Step 2: Remove file manager integrations
    if system == "Linux":
        # Remove binary
        binary_removed = uninstall_linux_binary(app_name)

        # Remove file manager integrations
        uninstall_nautilus_integration(app_name)
        uninstall_kde_integration(app_name)
        uninstall_xfce_integration(app_name)
        uninstall_mate_integration(app_name)

        print()
        if args.integrations:
            print("üéâ Linux file manager integrations removed!")
        else:
            print("üéâ Linux uninstallation completed!")
        if binary_removed:
            print("üìù You may need to restart your terminal to update PATH")
        print("üîÑ You may need to restart your file manager to see changes")

    elif system == "Darwin":
        uninstall_macos_quick_action(app_name)

        print()
        if args.integrations:
            print("üéâ macOS file manager integrations removed!")
        else:
            print("üéâ macOS uninstallation completed!")
        print("üîÑ The Quick Action should be removed immediately from Finder")


if __name__ == "__main__":
    main()
